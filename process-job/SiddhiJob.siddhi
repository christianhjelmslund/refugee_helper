@App:name("SiddhiJob")


@App:description("Description of the plan")

@sink(type='log', prefix='Input from Camunda')
@source(type = 'http', receiver.url = "http://0.0.0.0:8006/jobID", @map(type = 'json'))
define stream JobIDStream (job_id int);

/*@sink(type='log', prefix='Input from Job Script')*/
@source(type = 'http', receiver.url = "http://0.0.0.0:8006/jobs", @map(type = 'json'))
define stream JobApplicantStream (job_id int, first_name string, last_name string, birthday string);



@sink(type='http-call',
    publisher.url='http://host.docker.internal:8080/engine-rest/message',
    method='POST', sink.id='max-messages-received',
    @map(type='json', @payload("""{ "all": true, "messageName" : "max_messages_received", "processVariables": {"count_applications" : {"value" : "{{count}}", "type": "long"} } } """)))

@sink(type='log', prefix='CountEventStream') 
define stream CountEventStream(job_id int, count long);

@sink(type='log', prefix='JoinedStream') 
define stream JoinedStream(job_id int);


@info(name = 'application-count')
from JobApplicantStream#window.timeBatch(30 sec)
select job_id, count() as count
having count > 20 and job_id == 57490
insert into CountEventStream;

/*from JobIDStream 
    join JobApplicantStream#window.timeBatch(30 sec) as jobs 
    on JobIDStream.job_id == jobs.job_id
select JobIDStream.job_id as job_id
insert into JoinedStream;

from JoinedStream
select job_id, count() as count
having count > 20
insert into CountStream;*/

