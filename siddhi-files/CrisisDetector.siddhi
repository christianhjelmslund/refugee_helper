@App:name("Siddhi")







@App:description("Description of the plan")

@sink(type='log', prefix='LOGGER')
@source(type = 'http', receiver.url = "http://0.0.0.0:8006/news", @map(type = 'json'))
define stream NewsStream (news_count int, country string);

@sink(type='log') 
define stream AverageNews (avgNewsCount double, numberOfEvents long);


@sink(type='http-call',
    publisher.url='http://host.docker.internal:8080/engine-rest/message',
    method='POST', sink.id='crisis-detection',
    @map(type='json', @payload("""{ "all": true, "messageName" : "crisis_detected", "processVariables": {"crisis_country" : {"value" : "{{country}}", "type": "String"} } } """)))
@sink(type='log', prefix='http-call')
define stream CrisisStream(count int, country string);


@source(type='http-call-response', sink.id='crisis-detection',
    http.status.code='2\d+',
    @map(type='json', @attributes(userId='userId',
        title='title', id='id',
        completed='completed')))
@sink(type='log', prefix='LOGGESR')
define stream SuccessLoanRequestStream(userId int,
           title string, id int,
           completed bool);
           
           
@source(type='http-call-response', sink.id='crisis-detection',
    http.status.code='400',
    @map(type='json', @attributes(type='type',
        message='message')))
@sink(type='log', prefix='Errorr')
define stream ErrorLoanRequestStream(type string, message string);

@info(name = 'Average')
from NewsStream#window.time(1 min)
select avg(news_count) as avgNewsCount,
       count() as numberOfEvents
group by country
insert into AverageNews;


@info(name = 'Crisis-detection')
from NewsStream as news
    join AverageNews#window.time(1 min) as averageNews
    on news.news_count > convert(averageNews.avgNewsCount, 'int') + 20
select news.news_count as count, news.country as country
insert into CrisisStream;




